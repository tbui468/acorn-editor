Todo anytime
    Change EditorConfig variables screenrows and screencols to screen_rows and screen_cols for consistency
    Rename EditorConfig.row to EditorConfig.rows (since it's a point/array into all the rows)
    Weird bug when pressing 'Enter' when cursor is on first line of file
        When on first line only
        If x position is 0, it works fine
        otherwise there's a bug where the entire line is moved down and NOT just the string to the right of the cursor
    In editor_find_callback, the i in the for loop isn't being used... couldn't we just replace it with a loop using 'current'?

    Create a writeup on my website of how this project was created
        Mention the tutorial and that a lot of the info was gathered from there
            VT100 terminal emulator
        Add vim style modes: command, insert, visual
            enum EditorMode 
        Added vim keyboard shortcuts
            keyhistory for 'dd'.  Numbers not implemented yet
        Added ability to open multiple buffers (and buffer tabs on top of screen)
            struct EditorBuffer
            moved stuff from EditorConfig to EditorBuffer

        Add the following when implemented:
            also have key history to allow modifying keypresses with numbers 
            Clipboard for copying when in visual mode, and pasting
            History to allow undo/redo

TODO:
    'x' or 'd' in visual modes will delete selected text 
        need to set_clear flag after 'd' so that pushing it again won't trigger 'dd' command
        use 'editor_char_between_anchors' function to determine if character should be deleted
        BUT deleting chars will alter the anchors and selected characters - need to anchor some guys

        IDEA: Just count how many characters need to be deleted, position cursor at beginning, and
            then call delete a bunch of times until count is reached!!!

            get anchor positions.  Iterate from left to right, keeping track of highlighted positions

    use 'y' in visual mode to copy highlighted text to clipboard
        enters command mode immediately
        define a struct EditorClipboard to store yanked data
            just store a char* array, and insert \n at the end of each row
        'y' will copy to clipboard
        use 'p' in command mode to paste clipboard contents

    Implement Visual Block mode (ctrl-v)
        pressing 'I' will insert cursor on ALL lines so that entering a key will insert a character at a given 
            will move cursor to top left for 'I'
            pusing escape after enter text will insert all that text into rows (could just have it insert without pushing escape too)
            position on all rows - need to functionality on non-windows (since ctrl-v is used for pasting)
    Undo
        Visual block mode allows massive insertions of text, so the ability to undo would be good
            or at least the ability to delete in visual block mode

    In command mode, 'ci(' will delete all characters in closest surrounding () (same for ci[, ci{)
        and then change to insert mode with cursor between the ()

    bug: cursor not showing up when on empty line in command mode (we disabled cursor in command and visual mode)
        could display highlight block on last character on empty line, but NOT after last character if line is not empty...?
            could display block cursor, but in a different color (eg, orange instead of blue)
    use '>' or '<' to indent entire line in visual mode (regardless of how many characters in line are highlighted)
        enters command mode immediately
        '>' adds spaces equal to tab value to front of line
        '<' removes spaces equals to tab value from front of line
            if there are fewer spaces than tab value, just remove all until there are no spaces left
            if there are no spaces, do nothin
    bug: deleting all rows in a file locks program (can't insert new characters or lines)
            and then it crashes when we try to push enter/insert some characters (segmentation fault)

    Highlight Mode (need to be able to copy and paste - super important!)

        While in command mode, pushing v will anchor cursor and enter visual
            using 'hjkl' will move the cursor and highlight all text between anchor and cursor
            pushing 'd' in this mode will delete highlighted text
            pushing '<' or '>' will indent entire line 

        While in command mode, pushing 'V' will anchor and enter visual line mode
            using 'hjkl' will move cursor, BUT only entire lines will be highlighted at a time
            pushing 'd' in this mode will delete all selected lines
            pushing '<' or '>' will indent entire line 


    while in visual or visual line mode, press 'y' to copy contents to clipboard
            clipboard can start small, and realloc to larger size if user requires it

        'V' to highlight row and enter highlight mode
            in highlight mode, 'd' is used to delete

        'v' to enter highlight mode
            need to have variable to hold position from which highlight mode was entered
            then highlight from this position to the current cursor position
            how to exit highlight mode?

        in highlight mode:
            'y' to copy

        ctrl + c to enter multirow selection...? (not usable on windows terminal/linux)

    History Stack (along with visual mode to copy/paste) is important for efficiency

        'u' to undo (how to keep history...)
            certain actions are single history actions, others are not
                entering a string of chars all counts as one action until switching back to command mode or deleting something...?
                deleting a line using 'dd' counts as a single history action    


    :q closes current tab (and editor if last tab)
        Finish editor_close_buffer(int)
        need to to free all buffer memory to avoid memory leaks
    :Q closes editor
        attempting :Q will check if ALL buffers are not dirty (rather than just one)

    Display file name in tab (rather than status bar)

    Opening a new buffer inserts it right after the active buffer
        (rather than putting it in the end of the buffers)
        
    Number History
        Keep a separate buffer for numbers?  (Along with one for commands)
        If user enters a number, fill in buffer.  If number is consumed with command, then delete it...
        if user enters '1'-'9', and currently NOT in a number, set number_ptr* to that position (otherwise NULL number_ptr)
        if number_ptr* is not NULL, and current value is not '0'-'9', use strtol() to extract number (could do it when necessary)

            if x, check if last_pos is NULL....
            will need to NULL start and end ptrs if command uses them, or if non-command key combinations are pressed afterwards...

        Use key history to allow jumping rows/cols with number + hjkl
        mulidelete with number + x
        numbers can also be used for 'dd' and probably other multi-key strikes too

    
    Other stuff
        'l' should move cursor to right before last character (just like '$') and NOT to end of line (that's only 'a' or 'A') 
        if cursor is at end of line (from using 'a' or 'A'), going to command mode should move cursor back
            need to think of a better way to implement this - the current implementation allows moving cursor to one space beyond
            the last character and requires it for many things to work ...

            Should just switch ALL code to only move to the last character in a row by default in command mode
            insert mode allows the cursor to be one space after the last character if you press 'a' or 'A'
            when in insert mode and on character after last, if you switch to command mode, the cursor will move back to last character


    Clipboard 
        'p' in command mode to paste what was yanked with y in highlight mode

    Search Mode

    Add using ':' in command mode to open command in message bar (use editor_prompt(...)) to get user input
        :e [filename] to open buffer in new tab (how does deleting tabs work????)
            should display tabs/highlight current tab on top of screen
            need to reserve top row(s) for tabs
            should also display names (or at least parts of them) in tabs
            new tabs open to the right of the currently selected tab
            :q will close the current tab (need to repeat :q to close acorn)
        :b[number] to switch buffers

    Clean up code in insert mode (PAGE_UP, END, etc since we aren't using it)
        be sure to incorporate PAGE_UP code into vim (what keys does vim use for this?)

    Remove ctrl-q three times to quit dirty file - we are using 'q' and 'q!' now.

    Add Acorn to path so that we can open it anywhere to edit text files
    Add ability to modify command mode commands with numbers (eg, jump more than a single row/col, delete more, etc)
    Make buffers open a new 'tab' in the top (:e [filename])
    Vim doesn't really using the status bar/message bar setup - just one bar that shows message when necessary
    add search in vim  /word_to_search_for
        use 'n' and 'N' to jump to next/previous match

    Vim style controls
        make the cursor blink as a block when in command mode (and as a line in insert mode) so that there' a visual queue of which mode we are in

    Bug with syntax highlighting:
        'if' in 'else if' is not highlighted
        numbers after 'return' statement are not highlighted
        numbers after 'case:' are not highlighted
        NULL in c should be highlighted same as numbers (orange)

    Remove tabs (render them as all spaces) - this should simplify our code by a bit (no more render array needed)
        would need to render all \t as spaces equal to ACORN_TAB_STOP
            but we don't ever check for \t directly - the entire line is just copied to the line
        could replace all \t with ACORN_TAB_STOP number of spaces in all lines on opening - it might be a bit slower
            but we could then remove all render + render_size from codebase

    Add network support to allow two people to edit file at the same time (super advanced stuff) (HARD)
        one person (main) would open the file, and the other person connects to the open file
        the main has the ability to write to file (read is allowed for everyone connected)
        Could be really useful for teacher/student coding sessions
        STEPS: Set up two basic apps that can send data to each other (one is server, and one is client)
            then integrate that with the editor app.  Might need to figure out if ports w/ tcp/ip work the same when using WSL
