Todo anytime
    Change EditorConfig variables screenrows and screencols to screen_rows and screen_cols for consistency
    Rename EditorConfig.row to EditorConfig.rows (since it's a point/array into all the rows)
    Weird bug when pressing 'Enter' when cursor is on first line of file
        When on first line only
        If x position is 0, it works fine
        otherwise there's a bug where the entire line is moved down and NOT just the string to the right of the cursor
    In editor_find_callback, the i in the for loop isn't being used... couldn't we just replace it with a loop using 'current'?


TODO:

    'l' should move cursor to right before last character (just like '$') and NOT to end of line (that's only 'a' or 'A') 
    
    Status Bar and Message Bar merger
        Write message bar contents into status bar left side
        Don't need filetype - replace it with the filename (remove filename from left side of status bar)
        combine messages into left side of status bar
        move status bar to bottom of screen (where message bar used to be)

    Number History
        Keep a separate buffer for numbers?  (Along with one for commands)
        If user enters a number, fill in buffer.  If number is consumed with command, then delete it...
        if user enters '1'-'9', and currently NOT in a number, set number_ptr* to that position (otherwise NULL number_ptr)
        if number_ptr* is not NULL, and current value is not '0'-'9', use strtol() to extract number (could do it when necessary)

            if x, check if last_pos is NULL....
            will need to NULL start and end ptrs if command uses them, or if non-command key combinations are pressed afterwards...

        Use key history to allow jumping rows/cols with number + hjkl
        mulidelete with number + x
        numbers can also be used for 'dd' and probably other multi-key strikes too

    History Stack

        'u' to undo (how to keep history...)
            certain actions are single history actions, others are not
                entering a string of chars all counts as one action until switching back to command mode or deleting something...?
                deleting a line using 'dd' counts as a single history action    

    Highlight Mode

        'V' to highlight row and enter highlight mode
            in highlight mode, 'd' is used to delete

        'v' to enter highlight mode
            need to have variable to hold position from which highlight mode was entered
            then highlight from this position to the current cursor position
            how to exit highlight mode?

        ctrl + c to enter multirow selection...? (not usable on windows terminal/linux)

        in highlight mode:
            'y' to copy

    Clipboard 
        'p' in command mode to paste what was yanked with y in highlight mode

    Add using ':' in command mode to open command in message bar (use editor_prompt(...)) to get user input
        :e [filename] to open buffer in new tab (how does deleting tabs work????)
            should display tabs/highlight current tab on top of screen
            need to reserve top row(s) for tabs
            should also display names (or at least parts of them) in tabs
            new tabs open to the right of the currently selected tab
            :q will close the current tab (need to repeat :q to close acorn)
        :b[number] to switch buffers

    Clean up code in insert mode (PAGE_UP, END, etc since we aren't using it)
        be sure to incorporate PAGE_UP code into vim (what keys does vim use for this?)

    Remove ctrl-q three times to quit dirty file - we are using 'q' and 'q!' now.

    Add Acorn to path so that we can open it anywhere to edit text files
    Add ability to modify command mode commands with numbers (eg, jump more than a single row/col, delete more, etc)
    Make buffers open a new 'tab' in the top (:e [filename])
    Vim doesn't really using the status bar/message bar setup - just one bar that shows message when necessary
    add search in vim  /word_to_search_for
        use 'n' and 'N' to jump to next/previous match

    Vim style controls
        make the cursor blink as a block when in command mode (and as a line in insert mode) so that there' a visual queue of which mode we are in

    Bug with syntax highlighting:
        'if' in 'else if' is not highlighted
        numbers after 'return' statement are not highlighted
        numbers after 'case:' are not highlighted
        NULL in c should be highlighted same as numbers (orange)

    Remove tabs (render them as all spaces) - this should simplify our code by a bit (no more render array needed)
        would need to render all \t as spaces equal to ACORN_TAB_STOP
            but we don't ever check for \t directly - the entire line is just copied to the line
        could replace all \t with ACORN_TAB_STOP number of spaces in all lines on opening - it might be a bit slower
            but we could then remove all render + render_size from codebase

    Add network support to allow two people to edit file at the same time (super advanced stuff) (HARD)
        one person (main) would open the file, and the other person connects to the open file
        the main has the ability to write to file (read is allowed for everyone connected)
        Could be really useful for teacher/student coding sessions
        STEPS: Set up two basic apps that can send data to each other (one is server, and one is client)
            then integrate that with the editor app.  Might need to figure out if ports w/ tcp/ip work the same when using WSL
